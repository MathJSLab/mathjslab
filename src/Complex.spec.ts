import path from 'node:path';
import { ComplexInterfaceStatic, numberClass } from './ComplexInterface';
import { ComplexNumber } from './ComplexNumber';
import { ComplexDecimal } from './ComplexDecimal';
import { Complex } from './Complex';

const __filenameMatch = __filename.match(new RegExp(`.*\\${path.sep}([^\\${path.sep}]+)\\.spec\\.([cm]?[jt]s)\$`))!;
const unitName = __filenameMatch[1];
const testExtension = __filenameMatch[2];

describe(`${unitName} unit test (.${testExtension} test file).`, () => {
    jest.setTimeout(1000);

    const ComplexFacadeTestFactory = (engine: ComplexInterfaceStatic<any, any>) => {
        return () => {
            expect(engine).toBeDefined();
            expect(engine.isInstanceOf).toBeDefined();
            expect(engine.defaultSettings).toBeDefined();
            expect(engine.settings).toBeDefined();
            expect(engine.set).toBeDefined();
            expect(engine.setNumberType).toBeDefined();
            expect(engine.create).toBeDefined();
            expect(engine.from).toBeDefined();
            expect(engine.real).toBeDefined();
            expect(engine.imag).toBeDefined();
            expect(engine.realIsInteger).toBeDefined();
            expect(engine.imagIsInteger).toBeDefined();
            expect(engine.realIsNegative).toBeDefined();
            expect(engine.imagIsNegative).toBeDefined();
            expect(engine.realToNumber).toBeDefined();
            expect(engine.imagToNumber).toBeDefined();
            expect(engine.realLessThan).toBeDefined();
            expect(engine.imagLessThan).toBeDefined();
            expect(engine.realLessThanOrEqualTo).toBeDefined();
            expect(engine.imagLessThanOrEqualTo).toBeDefined();
            expect(engine.realEquals).toBeDefined();
            expect(engine.imagEquals).toBeDefined();
            expect(engine.realGreaterThanOrEqualTo).toBeDefined();
            expect(engine.imagGreaterThanOrEqualTo).toBeDefined();
            expect(engine.realGreaterThan).toBeDefined();
            expect(engine.imagGreaterThan).toBeDefined();
            expect(engine.parse).toBeDefined();
            expect(engine.unparse).toBeDefined();
            expect(engine.precedence).toBeDefined();
            expect(engine.unparseMathML).toBeDefined();
            expect(engine.copy).toBeDefined();
            expect(engine.toMaxPrecision).toBeDefined();
            expect(engine.epsilon).toBeDefined();
            expect(engine.random).toBeDefined();
            expect(engine.eq).toBeDefined();
            expect(engine.ne).toBeDefined();
            expect(engine.cmp).toBeDefined();
            expect(engine.minMaxArrayReal).toBeDefined();
            expect(engine.minMaxArrayRealWithIndex).toBeDefined();
            expect(engine.minMaxArrayComplex).toBeDefined();
            expect(engine.minMaxArrayComplexWithIndex).toBeDefined();
            expect(engine.min).toBeDefined();
            expect(engine.minWise).toBeDefined();
            expect(engine.max).toBeDefined();
            expect(engine.maxWise).toBeDefined();
            expect(engine.lt).toBeDefined();
            expect(engine.le).toBeDefined();
            expect(engine.gt).toBeDefined();
            expect(engine.ge).toBeDefined();
            expect(engine.false).toBeDefined();
            expect(engine.true).toBeDefined();
            expect(engine.logical).toBeDefined();
            expect(engine.toLogical).toBeDefined();
            expect(engine.and).toBeDefined();
            expect(engine.or).toBeDefined();
            expect(engine.xor).toBeDefined();
            expect(engine.not).toBeDefined();
            expect(engine.zero).toBeDefined();
            expect(engine.one).toBeDefined();
            expect(engine.onediv2).toBeDefined();
            expect(engine.minusonediv2).toBeDefined();
            expect(engine.minusone).toBeDefined();
            expect(engine.pi).toBeDefined();
            expect(engine.pidiv2).toBeDefined();
            expect(engine.onei).toBeDefined();
            expect(engine.onediv2i).toBeDefined();
            expect(engine.minusonediv2i).toBeDefined();
            expect(engine.minusonei).toBeDefined();
            expect(engine.two).toBeDefined();
            expect(engine.sqrt2pi).toBeDefined();
            expect(engine.e).toBeDefined();
            expect(engine.NaN_0).toBeDefined();
            expect(engine.inf_0).toBeDefined();
            expect(engine.add).toBeDefined();
            expect(engine.sub).toBeDefined();
            expect(engine.neg).toBeDefined();
            expect(engine.mul).toBeDefined();
            expect(engine.rdiv).toBeDefined();
            expect(engine.ldiv).toBeDefined();
            expect(engine.inv).toBeDefined();
            expect(engine.power).toBeDefined();
            expect(engine.root).toBeDefined();
            expect(engine.abs).toBeDefined();
            expect(engine.hypot).toBeDefined();
            expect(engine.arg).toBeDefined();
            expect(engine.conj).toBeDefined();
            expect(engine.mod).toBeDefined();
            expect(engine.rem).toBeDefined();
            expect(engine.fix).toBeDefined();
            expect(engine.ceil).toBeDefined();
            expect(engine.floor).toBeDefined();
            expect(engine.round).toBeDefined();
            expect(engine.sign).toBeDefined();
            expect(engine.sqrt).toBeDefined();
            expect(engine.exp).toBeDefined();
            expect(engine.log).toBeDefined();
            expect(engine.logb).toBeDefined();
            expect(engine.log2).toBeDefined();
            expect(engine.log10).toBeDefined();
            expect(engine.deg2rad).toBeDefined();
            expect(engine.rad2deg).toBeDefined();
            expect(engine.sin).toBeDefined();
            expect(engine.sind).toBeDefined();
            expect(engine.cos).toBeDefined();
            expect(engine.cosd).toBeDefined();
            expect(engine.tan).toBeDefined();
            expect(engine.tand).toBeDefined();
            expect(engine.csc).toBeDefined();
            expect(engine.cscd).toBeDefined();
            expect(engine.sec).toBeDefined();
            expect(engine.secd).toBeDefined();
            expect(engine.cot).toBeDefined();
            expect(engine.cotd).toBeDefined();
            expect(engine.asin).toBeDefined();
            expect(engine.asind).toBeDefined();
            expect(engine.acos).toBeDefined();
            expect(engine.acosd).toBeDefined();
            expect(engine.atan).toBeDefined();
            expect(engine.atand).toBeDefined();
            expect(engine.acsc).toBeDefined();
            expect(engine.acscd).toBeDefined();
            expect(engine.asec).toBeDefined();
            expect(engine.asecd).toBeDefined();
            expect(engine.acot).toBeDefined();
            expect(engine.acotd).toBeDefined();
            expect(engine.sinh).toBeDefined();
            expect(engine.cosh).toBeDefined();
            expect(engine.tanh).toBeDefined();
            expect(engine.csch).toBeDefined();
            expect(engine.sech).toBeDefined();
            expect(engine.coth).toBeDefined();
            expect(engine.asinh).toBeDefined();
            expect(engine.acosh).toBeDefined();
            expect(engine.atanh).toBeDefined();
            expect(engine.acsch).toBeDefined();
            expect(engine.asech).toBeDefined();
            expect(engine.acoth).toBeDefined();
            expect(engine.gamma).toBeDefined();
            expect(engine.factorial).toBeDefined();
            expect(engine.applyFunction).toBeDefined();
            expect(engine.mapFunction).toBeDefined();
            expect(engine.twoArgFunction).toBeDefined();
            expect(engine.LOGICAL).toBe(numberClass.LOGICAL);
            expect(engine.REAL).toBe(numberClass.REAL);
            expect(engine.COMPLEX).toBe(numberClass.COMPLEX);
        };
    };

    it(`The backend class ComplexNumber of the ${unitName} facade and its static properties and methods must be defined.`, ComplexFacadeTestFactory(ComplexNumber), 70);

    it(`The backend class ComplexDecimal of the ${unitName} facade and its static properties and methods must be defined.`, ComplexFacadeTestFactory(ComplexDecimal), 70);

    it(`The abstract class ${unitName} and its static properties and methods must be defined (Complex.engine = 'number').`, () => {
        Complex.engine = 'number';
        expect(Complex.engineBackend).toBeDefined();
        expect(Complex.engine).toBeDefined();
        ComplexFacadeTestFactory(Complex as unknown as ComplexInterfaceStatic<any, any>)();
    }, 70);

    it(`The abstract class ${unitName} and its static properties and methods must be defined (Complex.engine = 'decimal').`, () => {
        Complex.engine = 'decimal';
        expect(Complex.engineBackend).toBeDefined();
        expect(Complex.engine).toBeDefined();
        ComplexFacadeTestFactory(Complex as unknown as ComplexInterfaceStatic<any, any>)();
    }, 70);
});
